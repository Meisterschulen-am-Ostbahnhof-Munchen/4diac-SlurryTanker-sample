<?xml version="1.0" encoding="UTF-8"?>
<Function Name="DWORD_TO_QUARTERS" Comment="">
	<Identification Standard="61499-1">
	</Identification>
	<VersionInfo Version="1.0" Author="franz" Date="2024-02-22">
	</VersionInfo>
	<CompilerInfo>
	</CompilerInfo>
	<InterfaceList>
		<EventInputs>
			<Event Name="REQ" Type="Event" Comment="Normal Execution Request">
				<With Var="IN"/>
			</Event>
		</EventInputs>
		<EventOutputs>
			<Event Name="CNF" Type="Event" Comment="Execution Confirmation">
				<With Var="OUT_00"/>
				<With Var="OUT_01"/>
				<With Var="OUT_02"/>
				<With Var="OUT_03"/>
				<With Var="OUT_04"/>
				<With Var="OUT_05"/>
				<With Var="OUT_06"/>
				<With Var="OUT_07"/>
				<With Var="OUT_08"/>
				<With Var="OUT_09"/>
				<With Var="OUT_10"/>
				<With Var="OUT_11"/>
				<With Var="OUT_12"/>
				<With Var="OUT_13"/>
				<With Var="OUT_14"/>
				<With Var="OUT_15"/>
			</Event>
		</EventOutputs>
		<InputVars>
			<VarDeclaration Name="IN" Type="DWORD" Comment="DWORD Input"/>
		</InputVars>
		<OutputVars>
			<VarDeclaration Name="OUT_00" Type="BYTE" Comment="QUARTER BYTE 00"/>
			<VarDeclaration Name="OUT_01" Type="BYTE" Comment="QUARTER BYTE 01"/>
			<VarDeclaration Name="OUT_02" Type="BYTE" Comment="QUARTER BYTE 02"/>
			<VarDeclaration Name="OUT_03" Type="BYTE" Comment="QUARTER BYTE 03"/>
			<VarDeclaration Name="OUT_04" Type="BYTE" Comment="QUARTER BYTE 04"/>
			<VarDeclaration Name="OUT_05" Type="BYTE" Comment="QUARTER BYTE 05"/>
			<VarDeclaration Name="OUT_06" Type="BYTE" Comment="QUARTER BYTE 06"/>
			<VarDeclaration Name="OUT_07" Type="BYTE" Comment="QUARTER BYTE 07"/>
			<VarDeclaration Name="OUT_08" Type="BYTE" Comment="QUARTER BYTE 08"/>
			<VarDeclaration Name="OUT_09" Type="BYTE" Comment="QUARTER BYTE 09"/>
			<VarDeclaration Name="OUT_10" Type="BYTE" Comment="QUARTER BYTE 10"/>
			<VarDeclaration Name="OUT_11" Type="BYTE" Comment="QUARTER BYTE 11"/>
			<VarDeclaration Name="OUT_12" Type="BYTE" Comment="QUARTER BYTE 12"/>
			<VarDeclaration Name="OUT_13" Type="BYTE" Comment="QUARTER BYTE 13"/>
			<VarDeclaration Name="OUT_14" Type="BYTE" Comment="QUARTER BYTE 14"/>
			<VarDeclaration Name="OUT_15" Type="BYTE" Comment="QUARTER BYTE 15"/>
		</OutputVars>
	</InterfaceList>
	<FunctionBody>
		<ST><![CDATA[FUNCTION DWORD_TO_QUARTERS

VAR_INPUT
	IN : DWORD;    // DWORD Input
END_VAR

VAR_OUTPUT
	OUT_00 : BYTE;    // QUARTER BYTE 00
	OUT_01 : BYTE;    // QUARTER BYTE 01
	OUT_02 : BYTE;    // QUARTER BYTE 02
	OUT_03 : BYTE;    // QUARTER BYTE 03
	OUT_04 : BYTE;    // QUARTER BYTE 04
	OUT_05 : BYTE;    // QUARTER BYTE 05
	OUT_06 : BYTE;    // QUARTER BYTE 06
	OUT_07 : BYTE;    // QUARTER BYTE 07
	OUT_08 : BYTE;    // QUARTER BYTE 08
	OUT_09 : BYTE;    // QUARTER BYTE 09
	OUT_10 : BYTE;    // QUARTER BYTE 10
	OUT_11 : BYTE;    // QUARTER BYTE 11
	OUT_12 : BYTE;    // QUARTER BYTE 12
	OUT_13 : BYTE;    // QUARTER BYTE 13
	OUT_14 : BYTE;    // QUARTER BYTE 14
	OUT_15 : BYTE;    // QUARTER BYTE 15
END_VAR

(* this Function extracts the 16 QUARTER BYTE from a dword *)
OUT_00 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_00, SHFT_QUARTER_00));
OUT_01 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_01, SHFT_QUARTER_01));
OUT_02 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_02, SHFT_QUARTER_02));
OUT_03 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_03, SHFT_QUARTER_03));
OUT_04 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_04, SHFT_QUARTER_04));
OUT_05 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_05, SHFT_QUARTER_05));
OUT_06 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_06, SHFT_QUARTER_06));
OUT_07 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_07, SHFT_QUARTER_07));
OUT_08 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_08, SHIFT_QUARTER_08));
OUT_09 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_09, SHIFT_QUARTER_09));
OUT_10 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_10, SHIFT_QUARTER_10));
OUT_11 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_11, SHIFT_QUARTER_11));
OUT_12 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_12, SHIFT_QUARTER_12));
OUT_13 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_13, SHIFT_QUARTER_13));
OUT_14 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_14, SHIFT_QUARTER_14));
OUT_15 := DWORD_TO_BYTE(SHR(IN AND DWORD_QUARTER_15, SHIFT_QUARTER_15));
END_FUNCTION
]]></ST>
	</FunctionBody>
</Function>
